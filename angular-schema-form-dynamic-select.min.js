angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/strap/strapmultiselect.html",'<div ng-controller="dynamicSelectController" class="form-group {{form.htmlClass}}" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><div class="form-group {{form.fieldHtmlClass}}" ng-init="populateTitleMap(form)"><button type="button" class="btn btn-default" sf-changed="form" schema-validate="form" ng-model="$$value$$" data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}" data-html="1" data-multiple="1" data-max-length="{{form.options.inlineMaxLength}}" data-max-length-html="{{form.options.inlineMaxLengthHtml}}" bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;" bs-select=""></button> <span class="help-block">{{ (hasError() && errorMessage(schemaError())) || form.description}}</span></div></div>'),e.put("directives/decorators/bootstrap/strap/strapselect.html",'<div ng-controller="dynamicSelectController" class="form-group {{form.htmlClass}}" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><div class="form-group {{form.fieldHtmlClass}}" ng-init="populateTitleMap(form)"><button ng-if="(form.options.multiple == \'true\') || (form.options.multiple == true)" type="button" class="btn btn-default" sf-changed="form" schema-validate="form" ng-model="$$value$$" data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}" data-html="1" data-multiple="1" data-max-length="{{form.options.inlineMaxLength}}" data-max-length-html="{{form.options.inlineMaxLengthHtml}}" bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;" bs-select=""></button> <button ng-if="!((form.options.multiple == \'true\') || (form.options.multiple == true))" type="button" class="btn btn-default" sf-changed="form" schema-validate="form" ng-model="$$value$$" data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}" data-html="1" bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;" bs-select=""></button> <span class="help-block">{{ (hasError() && errorMessage(schemaError())) || form.description}}</span></div></div>'),e.put("directives/decorators/bootstrap/strap/uiselect.html",'<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}" ng-init="selectedOptions=form.titleMap; insideModel=$$value$$;"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div class="form-group" ng-init="select_model.selected=selectedOptions[0]"><ui-select ng-controller="dynamicSelectController" ng-model="select_model.selected" ng-if="!(form.options.tagging||false)" theme="bootstrap" ng-disabled="form.disabled" on-select="$$value$$=$item.value" class="{{form.options.uiClass}}"><ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{select_model.selected.name}}</ui-select-match><ui-select-choices refresh="populateTitleMap(form, form.options, $select.search)" refresh-delay="form.options.refreshDelay" group-by="form.options.groupBy" repeat="item in form.titleMap | propsFilter: {name: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }"><div ng-bind-html="item.name | highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\'))+ \'</small>\'"></span></div></ui-select-choices></ui-select><input type="hidden" toggle-single-model="" sf-changed="form" ng-model="insideModel" schema-validate="form"> <span ng-if="form.feedback !== false" class="form-control-feedback" ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"></span><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div></div>'),e.put("directives/decorators/bootstrap/strap/uiselectmultiple.html",'<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}" ng-controller="dynamicSelectController" ng-init="uiMultiSelectInitInternalModel($$value$$)"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div class="form-group"><ui-select multiple="" sortable-options="{{form.sortableOptions}}" ng-model="internalModel" theme="bootstrap" on-select="$$value$$.push($item.value)" on-remove="$$value$$.splice($$value$$.indexOf($item.value), 1)" class="{{form.options.uiClass}}"><ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{$item.name}}</ui-select-match><ui-select-choices repeat="item in form.titleMap | propsFilter: {name: $select.search}" refresh="populateTitleMap(form, $select.search)" refresh-delay="form.options.refreshDelay"><div ng-bind-html="item.name | highlight: $select.search"></div></ui-select-choices></ui-select><span ng-if="form.feedback !== false" class="form-control-feedback" ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"></span><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div></div>')}]),angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/strap/strapmultiselect.html",'<div ng-controller="dynamicSelectController" class="form-group {{form.htmlClass}}"\n     ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}">\n    <label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label>\n\n    <div class="form-group {{form.fieldHtmlClass}}" ng-init="populateTitleMap(form)">\n        <button type="button" class="btn btn-default" sf-changed="form" schema-validate="form" ng-model="$$value$$"\n                data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}"\n                data-html="1"\n                data-multiple="1" data-max-length="form.options.inlineMaxLength"  data-max-length-html="form.options.inlineMaxLengthHtml"\n                bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;"\n                bs-select>\n        </button>\n        <span class="help-block">{{ (hasError() && errorMessage(schemaError())) || form.description}}</span>\n    </div>\n</div>\n'),e.put("directives/decorators/bootstrap/strap/strapselect.html",'<div ng-controller="dynamicSelectController" class="form-group {{form.htmlClass}}"\n     ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}">\n    <label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label>\n\n    <div class="form-group {{form.fieldHtmlClass}}" ng-init="populateTitleMap(form)">\n        <button ng-if="(form.options.multiple == \'true\') || (form.options.multiple == true)"\n                type="button" class="btn btn-default" sf-changed="form" schema-validate="form" ng-model="$$value$$"\n                data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}"\n                data-html="1" data-multiple="1" data-max-length="{{form.options.inlineMaxLength}}"\n                data-max-length-html="{{form.options.inlineMaxLengthHtml}}"\n                bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;"\n                bs-select>\n        </button>\n        <button ng-if="!((form.options.multiple == \'true\') || (form.options.multiple == true))"\n                type="button" class="btn btn-default" sf-changed="form" schema-validate="form" ng-model="$$value$$"\n                data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}"\n                data-html="1"\n                bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;"\n                bs-select>\n        </button>\n        <span class="help-block">{{ (hasError() && errorMessage(schemaError())) || form.description}} </span>\n    </div>\n</div>\n\n')}]),angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/uiselect/uiselect.html",'<div class="form-group"\n     ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}"\n         ng-init="selectedOptions=form.titleMap; insideModel=$$value$$;">\n    <label class="control-label" ng-show="showTitle()">{{form.title}}</label>\n\n    <div class="form-group" ng-init="select_model.selected=selectedOptions[0]">\n        <ui-select ng-controller="dynamicSelectController" ng-model="select_model.selected"\n                   ng-if="!(form.options.tagging||false)" theme="bootstrap" ng-disabled="form.disabled"\n                   on-select="$$value$$=$item.value" class="{{form.options.uiClass}}">\n            <ui-select-match\n                    placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">\n                {{select_model.selected.name}}\n            </ui-select-match>\n            <ui-select-choices refresh="populateTitleMap(form, form.options, $select.search)"\n                               refresh-delay="form.options.refreshDelay" group-by="form.options.groupBy"\n                               repeat="item in form.titleMap | propsFilter: {name: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }">\n                <div ng-bind-html="item.name | highlight: $select.search"></div>\n                <div ng-if="item.description">\n                    <span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\'))+ \'</small>\'"></span>\n                </div>\n            </ui-select-choices>\n        </ui-select>\n        <ui-select ng-controller="dynamicSelectController" ng-model="select_model.selected"\n                   ng-if="(form.options.tagging||false) && !(form.options.groupBy || false)"\n                   tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel"\n                   tagging-tokens="form.options.taggingTokens"\n                   theme="bootstrap" ng-disabled="form.disabled" on-select="$$value$$=$item.value"\n                   class="{{form.options.uiClass}}">\n            <ui-select-match\n                    placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">\n                {{select_model.selected.name}}&nbsp;\n                <small>{{(select_model.selected.isTag===true ? form.options.taggingLabel : \'\')}}</small>\n            </ui-select-match>\n            <!--repeat code because tagging does not display properly under group by but is still useful -->\n            <ui-select-choices refresh="populateTitleMap(form, form.options, $select.search)"\n                               refresh-delay="form.options.refreshDelay"\n                               repeat="item in form.titleMap | propsFilter: {name: $select.search, description: (form.options.searchDescription===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }">\n                <div ng-if="item.isTag"\n                     ng-bind-html="\'<div>\' + (item.name   | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div><div class=&quot;divider&quot;></div>\'"></div>\n                <div ng-if="!item.isTag" ng-bind-html="item.name + item.isTag| highlight: $select.search"></div>\n                <div ng-if="item.description">\n                    <span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span>\n                </div>\n            </ui-select-choices>\n        </ui-select>\n\n        <!--repeat code because tagging does not display properly under group by but is still useful -->\n\n        <ui-select ng-controller="dynamicSelectController" ng-model="select_model.selected"\n                   ng-if="(form.options.tagging||false) && (form.options.groupBy || false)"\n                   tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel"\n                   tagging-tokens="form.options.taggingTokens"\n                   theme="bootstrap" ng-disabled="form.disabled" on-select="$$value$$=$item.value"\n                   class="{{form.options.uiClass}}">\n            <ui-select-match\n                    placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">\n                {{select_model.selected.name}}&nbsp;\n                <small>{{(select_model.selected.isTag===true ? form.options.taggingLabel : \'\')}}</small>\n            </ui-select-match>\n            <ui-select-choices group-by="form.options.groupBy"\n                               refresh="populateTitleMap(form, form.options, $select.search)"\n                               refresh-delay="form.options.refreshDelay"\n                               repeat="item in form.titleMap | propsFilter: {name: $select.search, description: (form.options.searchDescription===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }">\n                <div ng-if="item.isTag"\n                     ng-bind-html="\'<div>\' + (item.name  | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div><div class=&quot;divider&quot;></div>\'"></div>\n                <div ng-if="!item.isTag" ng-bind-html="item.name + item.isTag| highlight: $select.search"></div>\n                <div ng-if="item.description">\n                    <span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span>\n                </div>\n            </ui-select-choices>\n        </ui-select>\n        <input type="hidden" toggle-single-model sf-changed="form" ng-model="insideModel" schema-validate="form"/>\n    <span ng-if="form.feedback !== false"\n          class="form-control-feedback"\n          ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"></span>\n\n        <div class="help-block"\n             ng-show="(hasError() && errorMessage(schemaError())) || form.description"\n             ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div>\n    </div>\n</div>'),e.put("directives/decorators/bootstrap/uiselect/uiselectmultiple.html",'\n<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}"\n        ng-controller="dynamicSelectController" ng-init="uiMultiSelectInitInternalModel($$value$$)">\n  <label class="control-label" ng-show="showTitle()">{{form.title}}</label>\n  <div class="form-group">\n    <ui-select multiple sortable-options="{{form.sortableOptions}}" ng-model="internalModel" theme="bootstrap"\n               on-select="$$value$$.push($item.value)" on-remove="$$value$$.splice($$value$$.indexOf($item.value), 1)"\n               class="{{form.options.uiClass}}">\n      <ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{$item.name}}</ui-select-match>\n      <ui-select-choices repeat="item in form.titleMap | propsFilter: {name: $select.search}"\n         refresh="populateTitleMap(form, $select.search)"\n         refresh-delay="form.options.refreshDelay">\n        <div ng-bind-html="item.name | highlight: $select.search"></div>\n      </ui-select-choices>\n    </ui-select>\n    <span ng-if="form.feedback !== false"\n      class="form-control-feedback"\n      ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"></span>\n    <div class="help-block"\n      ng-show="(hasError() && errorMessage(schemaError())) || form.description"\n      ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div>\n  </div>\n</div>')}]),angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(e,t,l){var o=function(t,o,r){if("string"===o.type&&"enum"in o){var s=e.stdFormObj(t,o,r);return s.key=r.path,s.type="strapselect",r.lookup[l.stringify(r.path)]=s,s}};e.defaults.string.unshift(o),t.addMapping("bootstrapDecorator","strapselect","directives/decorators/bootstrap/strap/strapselect.html"),t.createDirective("strapselect","directives/decorators/bootstrap/strap/strapselect.html"),t.addMapping("bootstrapDecorator","strapmultiselect","directives/decorators/bootstrap/strap/strapmultiselect.html"),t.createDirective("strapmultiselect","directives/decorators/bootstrap/strap/strapmultiselect.html"),t.addMapping("bootstrapDecorator","strapselectdynamic","directives/decorators/bootstrap/strap/strapselect.html"),t.createDirective("strapselectdynamic","directives/decorators/bootstrap/strap/strapselect.html"),t.addMapping("bootstrapDecorator","strapmultiselectdynamic","directives/decorators/bootstrap/strap/strapmultiselect.html"),t.createDirective("strapmultiselectdynamic","directives/decorators/bootstrap/strap/strapmultiselect.html"),t.addMapping("bootstrapDecorator","uiselect","directives/decorators/bootstrap/uiselect/uiselect.html"),t.createDirective("uiselect","directives/decorators/bootstrap/uiselect/uiselect.html"),t.addMapping("bootstrapDecorator","uiselectmultiple","directives/decorators/bootstrap/uiselect/uiselectmultiple.html"),t.createDirective("uiselectmultiple","directives/decorators/bootstrap/uiselect/uiselectmultiple.html")}]).directive("toggleSingleModel",function(){return{require:"ngModel",restrict:"A",scope:{},replace:!0,controller:["$scope",function(e){e.$parent.$watch("select_model.selected",function(){void 0!=e.$parent.select_model.selected&&(e.$parent.insideModel=e.$parent.select_model.selected.value,e.$parent.ngModel.$setViewValue(e.$parent.select_model.selected.value))})}]}}).directive("toggleModel",function(){return{require:"ngModel",restrict:"A",scope:{},controller:["$scope","sfSelect",function(e,t){var l=t(e.$parent.form.key,e.$parent.model);angular.isUndefined(l)&&(l=[],t(e.$parent.form.key,e.$parent.model,l)),e.$parent.$watch("form.selectedOptions",function(){e.$parent.form.selectedOptions&&(0==e.$parent.form.selectedOptions.length?void 0!=e.$parent.ngModel.$viewValue&&e.$parent.ngModel.$setViewValue(e.$parent.form.selectedOptions):(e.$parent.$$value$$=[],e.$parent.form.selectedOptions.forEach(function(t){e.$parent.$$value$$.push(t.value)}),e.$parent.ngModel.$setViewValue(e.$parent.$$value$$)))},!0)}]}}).directive("multipleOn",function(){return{link:function(e,t,l){e.$watch(function(){return t.attr("multiple-on")},function(e){if("true"==e){var l=angular.element(t).scope().$$childTail;l.$isMultiple=!0,l.options.multiple=!0,l.$select.$element.addClass("select-multiple")}else angular.element(t).scope().$$childTail.$isMultiple=!1})}}}).filter("whereMulti",function(){return function(e,t,l){var o=[];return angular.isArray(l)&&void 0!==e?l.forEach(function(l){for(var r=0;r<e.length;r++)if(l==e[r][t]){o.push(e[r]);break}}):o=e,o}}).filter("propsFilter",function(){return function(e,t){var l=[];return angular.isArray(e)?e.forEach(function(e){for(var o=!1,r=Object.keys(t),s=0;s<r.length;s++){var a=r[s];if(e.hasOwnProperty(a)){var i=t[a].toLowerCase();if(0===e[a].toString().toLowerCase().indexOf(i)||-1!==e[a].toString().toLowerCase().indexOf(" "+i)){o=!0;break}}}o&&l.push(e)}):l=e,l}}),angular.module("schemaForm").controller("dynamicSelectController",["$scope","$http","$timeout",function(e,t,l){e.triggerTitleMap=function(){console.log("listener triggered"),e.form.titleMap.push({value:"345890u340598u3405u9",name:"34095u3p4ouij"}),l(function(){e.form.titleMap.pop()})},e.initFiltering=function(t){e.form.options.filterTriggers&&e.form.options.filterTriggers.forEach(function(t){e.$parent.$watch(t,e.triggerTitleMap)}),e.localModelType=Object.prototype.toString.call(t),e.filteringInitialized=!0},e.remap=function(e,t){if(e&&"map"in e&&e.map){var l=[];return t.forEach(function(t){t.value=t[e.map.valueProperty],t.name=t[e.map.nameProperty],l.push(t)}),l}return t.forEach(function(e){"text"in e&&(e.name=e.text)}),t},e.clone=function(t){if(null==t||"object"!=typeof t)return t;var l=t.constructor();for(var o in t)t.hasOwnProperty(o)&&(l[o]=e.clone(t[o]));return l},e.getCallback=function(t,l){if("string"==typeof t){var o=e.$parent.evalExpr(t);if("function"==typeof o)return o;throw"A callback string must match name of a function in the parent scope"}if("function"==typeof t)return t;throw"A callback must either be a string matching the name of a function in the parent scope or a direct function reference"},e.getOptions=function(t){return t.httpPost&&t.httpPost.optionsCallback?(newOptionInstance=e.clone(t),e.getCallback(t.httpPost.optionsCallback)(newOptionInstance)):t.httpGet&&t.httpGet.optionsCallback?(newOptionInstance=e.clone(t),e.getCallback(t.httpGet.optionsCallback)(newOptionInstance)):t},e.test=function(e){e.titleMap.pop()},e.populateTitleMap=function(l){function o(t){for(i=0;i<e.form.titleMap.length;i++)if(e.form.titleMap[i].value===t)return e.form.titleMap[i].name}if("enum"in l.schema)l.titleMap=[],l.schema["enum"].forEach(function(e){l.titleMap.push({value:e,name:e})});else if(l.titleMap)console.log("dynamicSelectController.populateTitleMap(key:"+l.key+") : There is already a titleMap");else if(l.options)if(l.options.callback)l.titleMap=e.getCallback(l.options.callback)(l.options),console.log("callback items",l.titleMap);else{if(l.options.asyncCallback)return e.getCallback(l.options.asyncCallback)(l.options).then(function(t){l.titleMap=e.remap(l.options,t.data),console.log("asyncCallback items",l.titleMap)},function(e,t){alert("Loading select items failed(Options: '"+String(l.options)+"\nError: "+t)});if(l.options.httpPost){var r=e.getOptions(l.options);return t.post(r.httpPost.url,r.httpPost.parameter).then(function(t){l.titleMap=e.remap(r,t.data),console.log("httpPost items",l.titleMap)},function(e,t){alert("Loading select items failed (URL: '"+String(r.httpPost.url)+"' Parameter: "+String(r.httpPost.parameter)+"\nError: "+t)})}if(l.options.httpGet){var r=e.getOptions(l.options);return t.get(r.httpGet.url,r.httpGet.parameter).then(function(t){l.titleMap=e.remap(r,t.data),console.log("httpGet items",l.titleMap)},function(e,t){alert("Loading select items failed (URL: '"+String(r.httpGet.url)+"\nError: "+t)})}}else console.log("dynamicSelectController.populateTitleMap(key:"+l.key+") : No options set, needed for dynamic selects");if(void 0!==e.uiMultiSelectModel&&angular.isArray(e.uiMultiSelectModel))e.internalModel=[],e.uiMultiSelectModel.forEach(function(t){e.internalModel.push({value:t,name:o(t)})});else if(void 0!==e.$parent.insideModel){var s=e.$parent.insideModel;e.$parent.select_model.selected={value:s,name:o(s)},e.$parent.ngModel.$setViewValue(e.$parent.select_model.selected.value)}},e.uiMultiSelectInitInternalModel=function(t){e.uiMultiSelectModel=t,console.log("$scope.uiMultiSelectModel==== from uiMultiSelectInitInternalModel======="),console.log(e.uiMultiSelectModel)}}]),angular.module("schemaForm").filter("selectFilter",[function(e){return function(e,t,l,o){if(!angular.isDefined(e)||!angular.isDefined(t.form.options)||!angular.isDefined(t.form.options.filter)||""==t.form.options.filter)return e;console.log("----- In filtering for "+t.form.key+"("+t.form.title+"), model value: "+JSON.stringify(l)+"----"),console.log("Filter:"+t.form.options.filter),t.filteringInitialized||(console.log("Initialize filter"),t.initFiltering(l));var r=[];return angular.forEach(e,function(e){console.log("Compare: curr_item: "+JSON.stringify(e)+"with : "+JSON.stringify(t.$eval(t.form.options.filterTriggers[0]))),t.$eval(t.form.options.filter,{item:e})?r.push(e):l&&("[object Array]"==t.localModelType&&l.indexOf(e.value)>-1?l.splice(l.indexOf(e.value),1):l==e.value&&(console.log("Setting model of type "+t.localModelType+"to null."),l=null))}),"[object Array]"!=t.localModelType||l||(console.log("Resetting model of type "+t.localModelType+" to []."),t.$eval(o+"=[]")),console.log("Input: "+JSON.stringify(e)),console.log("Output: "+JSON.stringify(r)),console.log("Model value out : "+JSON.stringify(l)),console.log("----- Exiting filter for "+t.form.title+"-----"),r}}]);